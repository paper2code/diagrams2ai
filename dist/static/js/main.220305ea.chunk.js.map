{"version":3,"sources":["Backend.js","HomePage/ModelsList.js","HomePage/HomePage.js","Helpers/Helpers.js","ChatWindow/Message.js","ChatWindow/ChatWindow.js","IntentNode/IntentPortModel.ts","Rasa/Models.ts","IntentNode/IntentNodeModel.ts","IntentNode/IntentNodeWidget.tsx","IntentNode/IntentNodeFactory.tsx","IntentNode/SimplePortFactory.ts","Designer/WidgetsEditor.js","Designer/Diagram.js","Designer/Actions.js","Designer/Designer.js","App.js","serviceWorker.js","index.js"],"names":["Backend","url","arguments","length","undefined","Object","classCallCheck","this","createClass","key","value","uri","params","method","fetch","headers","Content-Type","body","JSON","stringify","http","then","res","json","ModelsList","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleModelDelete","id","backend","post","result","getModelsList","error","console","log","state","selectedmodel","models","inherits","_this2","get","setState","_this3","react_default","a","createElement","Table","celled","selectable","Header","Row","HeaderCell","width","Body","map","model","index","Cell","onClick","onModelSelected","bind","name","Button","React","Component","HomePage","history","push","react_router_dom","to","color","ModelsList_ModelsList","UID","Math","random","toString","substr","arrayToObject","array","keyField","reduce","obj","item","MsgReceive","text","buttons","msg","handleButtonClick","uid","className","btn","basic","payload","title","Label","as","MsgSend","ChatInput","handleInputKeypress","assertThisInitialized","event","charCode","handleEnterMessage","currentTarget","Input","style","icon","placeholder","onKeyPress","ChatWindow","httpurl","messages","userId","i","m","sender","onIntentChange","input","_this4","message","postNewMessage","_this5","sendMessage","target","msgelems","mi","hide","display","size","lib_default","ChatWindow_ChatInput","IntentPortModel","_PortModel","pos","position","_","prototype","data","engine","DefaultLinkModel","setColor","PortModel","RasaIntent","type","texts","RasaButton","RasaAction","IntentNodeModel","_NodeModel","intent","actions","active","addPort","arr","NodeModel","IntentFallbackNodeModel","_IntentNodeModel","addAction","IntentNodeWidget","node","activeClass","react","height","zIndex","top","left","background","main","Segment","vertical","textAlign","List","Item","action","ni","defaultProps","IntentNodeFactory","_SRD$AbstractNodeFact","diagramEngine","IntentNodeWidget_IntentNodeWidget","SRD","SimplePortFactory","_AbstractPortFactory","cb","initialConfig","AbstractPortFactory","WidgetsEditor","handleIntentInputChange","test","handleIntentTextChange","split","handleAddAction","e","_ref","persist","textContent","setAction","handleActionUtterInputChange","_ref2","iaction","handleActionDismiss","_ref3","action_name","deleteAction","handleActionTextChange","_ref4","handleActionAddButton","_ref5","handleActionButtonInputChange","_ref6","handleActionButtonUtterInputChange","_ref7","x","join","submitHandler","objectSpread","values","onSubmit","Form","Field","disabled","onChange","Message","Content","TextArea","prop","r","loopObject","onDismiss","b","circular","content","Dropdown","fluid","search","selection","options","EditorHeader","children","Dashboard","handleModelNameChange","val","handleChatIntentChange","tracker","latest_message","setIntentNodeActive","_this$props","nodes","repaintCanvas","_this$props2","httpport","saving","saved","modelsaveinfo","training","selectednode","self","parsed","queryString","parse","window","location","setupModelListeners","ok","deSerializeDiagram","diagram","createDemoNodes","setDiagramModel","addNewNode","saveModel","trainModel","runModel","addListener","nodesUpdated","selectionChanged","isSelected","entity","fallback","setPosition","mynode1","setIntentTexts","setActionTexts","mynode2","link","setSourcePort","getPort","setTargetPort","addAll","savemodel","serializeDiagram","saveinfo","pathname","jsm","offsetX","offsetY","y","setSelected","stopPropagation","weditor","controlcontent","editorheader","selnode","WidgetsEditor_WidgetsEditor","widgetEditorSubmit","Group","widths","loading","Fragment","onKeyDown","widgetEditorKeypress","onKeyUp","ChatWindow_ChatWindow_ChatWindow","Diagram","DiagramEngine","installDefaultFactories","registerPortFactory","registerNodeFactory","DiagramModel","Diagram_Dashboard","Actions","handleFallbackActionTextChange","action_default_fallback","padding","unstackable","minHeight","Designer","match","Nav","assign","isActive","activeClassName","Menu","concat","react_router","path","component","DesignerEditor","DesignerActions","Actions_Actions","App","exact","Boolean","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.220305ea.chunk.js","sourcesContent":["\n\nexport class Backend {\n    constructor(url = \"http://localhost:5000\") {\n        this.url = url;\n    }\n\n    http(uri, params, method = 'POST') {\n        return fetch(this.url + uri, {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(params),\n        });\n    }\n\n    get(uri, params) {\n        return this.http(uri, params, 'GET').then(res => res.json())\n    }\n\n    post(uri, params) {\n        return this.http(uri, params, 'POST').then(res => res.json())\n    }\n}","import React from 'react';\nimport './HomePage';\nimport { Table, Button } from 'semantic-ui-react';\nimport { Backend } from '../Backend';\n\nexport class ModelsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.backend = new Backend();\n        this.state = {\n            selectedmodel: \"\",\n            models: [],\n        }\n        this.getModelsList()\n    }\n\n    getModelsList() {\n        this.backend.get(\"/models/list\").then(\n            (result) => {\n                this.setState({ models: result });\n            },\n            (error) => {\n                console.log(\"Failed to post new message\", error);\n            }\n        );\n    }\n\n    handleModelDelete = (id) => {\n        this.backend.post(\"/model/delete\", { \"id\": id }).then(\n            (result) => {\n                this.getModelsList();\n            },\n            (error) => {\n                console.log(\"Failed to delete model\", error);\n            }\n        );\n    }\n\n    render() {\n        return (\n            <Table celled selectable>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Id</Table.HeaderCell>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell width={1}></Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n\n                <Table.Body>\n                    {\n                        this.state.models.map((model, index) => {\n                            return (\n                                <Table.Row key={model.id} >\n                                    <Table.Cell onClick={this.props.onModelSelected.bind(null, model)}>{model.id}</Table.Cell>\n                                    <Table.Cell onClick={this.props.onModelSelected.bind(null, model)}>{model.name}</Table.Cell>\n                                    <Table.Cell >\n                                        <Button onClick={this.handleModelDelete.bind(null, model.id)}>Delete</Button>\n                                    </Table.Cell>\n                                </Table.Row>\n                            )\n                        })\n                    }\n                </Table.Body>\n            </Table>\n        );\n    }\n}","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { Button, Header } from \"semantic-ui-react\";\nimport './HomePage.css'\nimport { ModelsList } from \"./ModelsList\";\n\n\nclass HomePage extends React.Component {\n    onModelSelected(model) {\n        this.props.history.push(\"/designer/editor?model=\" + model.id)\n    }\n\n    render() {\n        return (\n            <div id=\"homepage\">\n                <NavLink to=\"/designer/editor\"><Button color='blue'>Create New</Button></NavLink>\n                <Header>Models:</Header>\n                <ModelsList onModelSelected={this.onModelSelected.bind(this)} />\n            </div>\n        );\n    }\n}\n\nexport {\n    HomePage\n}","\nexport function UID() {\n    // Math.random should be unique because of its seeding algorithm.\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n    // after the decimal.\n    return '_' + Math.random().toString(36).substr(2, 9);\n};\n\n// export function arrayToObject(array) {\n//     return array.reduce((obj, item) => {\n//         obj[item.name] = item\n//         return obj\n//     }, {})\n// };\n\nexport const arrayToObject = (array, keyField) =>\n    array.reduce((obj, item) => {\n        obj[item[keyField]] = item\n        return obj\n    }, {});\n\nexport function loopObject(obj, cb) {\n    var res = [];\n    for (var prop in obj) {\n        var r = cb(obj[prop], prop);\n        res.push(r);\n    }\n    return res;\n};\n\nexport function isAlphanumeric(str) {\n    var patt = /^[0-9a-zA-Z_.-]*$/g;\n    return patt.test(str);\n}","import React from 'react';\nimport { Label, Button } from 'semantic-ui-react'\nimport './ChatWindow.css';\n\nfunction MsgReceive(props) {\n    const { msg, handleButtonClick, uid } = props;\n    var text;\n    var buttons;\n\n    if (msg.buttons && msg.buttons.length > 0) {\n        buttons = (\n            <div className=\"chatti-msgwrap\">\n                {\n                    msg.buttons.map((btn, index) => {\n                        return (\n                            <Button key={uid + \"chat-btn\" + index} onClick={handleButtonClick} basic color='blue' value={btn.payload}>{btn.title}</Button>\n                        )\n                    })\n                }\n            </div>\n        );\n    }\n\n    if (msg.text !== \"\") {\n        text = <Label as='a' basic color='blue'>\n            {msg.text}\n        </Label>;\n    }\n\n    // console.log(msg, content);\n\n    return (\n        <div className=\"chatti-msgwrap\">\n            {text}\n            {buttons}\n        </div>\n    );\n}\n\nfunction MsgSend(props) {\n    const { msg } = props;\n    return (\n        <div className=\"chatti-msgwrap right\">\n            <Label as='a' basic color='black'>\n                {msg.text}\n            </Label>\n        </div>\n    );\n}\n\nexport {\n    MsgReceive,\n    MsgSend,\n}","import React from 'react';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { Header, Input } from 'semantic-ui-react';\nimport { UID } from '../Helpers/Helpers';\nimport { Backend } from '../Backend';\nimport './ChatWindow.css';\nimport { MsgReceive, MsgSend } from './Message';\n\n/* \n    This should be developed as separated component. \n    It should be usable with other projects\n*/\n\nclass ChatInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleInputKeypress = this.handleInputKeypress.bind(this);\n    }\n\n    handleInputKeypress(event) {\n        if (event.key === 'Enter' || event.charCode === 13) {\n            this.props.handleEnterMessage(event.currentTarget.value);\n            event.currentTarget.value = \"\";\n        }\n\n    }\n\n    render() {\n        return (\n            <div>\n                <Input style={{ width: '100%' }} icon='location arrow' placeholder='Send...' onKeyPress={this.handleInputKeypress} />\n            </div>\n        );\n    }\n\n}\n\nclass ChatWindow extends React.Component {\n    constructor(props) {\n        super(props);\n        const { httpurl } = this.props;\n\n        this.state = {\n            messages: [],\n        }\n\n        this.userId = \"user\" + UID();\n        this.backend = new Backend(httpurl);\n\n        console.log(\"Chat listening on\", httpurl);\n        this.handleEnterMessage = this.handleEnterMessage.bind(this);\n    }\n\n    postNewMessage(result) {\n        console.log(\"Got response\", result);\n\n        this.setState((state) => {\n            for (var i in result) {\n                var m = result[i];\n                state.messages.push({\n                    sender: \"\",\n                    text: m.text,\n                    buttons: m.buttons || [],\n                });\n            }\n            // console.log(\"newConversations\", state.conversations);\n            return state;\n        })\n\n        this.backend.get(\"/conversations/\" + this.userId + \"/tracker\").then(\n            (result) => {\n                this.props.onIntentChange(result);\n            },\n            (error) => {\n                console.log(\"Failed to post new message\", error);\n            }\n        )\n    }\n\n    sendMessage(input) {\n        var msg = {\n            sender: this.userId,\n            message: input,\n        }\n\n        this.backend.post(\"/webhooks/rest/webhook\", msg).then(\n            (result) => {\n                this.postNewMessage(result);\n            },\n            (error) => {\n                console.log(\"Failed to post new message\", error);\n            }\n        )\n    }\n\n    handleEnterMessage(input) {\n        console.log(\"Mesage entered \", input);\n\n        this.setState((state) => {\n            state.messages.push({\n                sender: this.userId,\n                text: input,\n            });\n            // console.log(\"newConversations\", state.conversations);\n            return state;\n        })\n        this.sendMessage(input);\n    }\n\n    handleButtonClick(event) {\n        this.handleEnterMessage(event.target.value);\n    }\n\n    // componentWillUpdate() {\n    //     const node = this.node;\n    //     this.shouldScrollBottom = node.scrollTop +\n    //         node.offsetHeight === node.scrollHeight;\n    // }\n\n    // componentDidUpdate() {\n    //     console.log(\"UPDATING SCROLL\", this.node);\n    //     const node = this.node;\n    //     this.shouldScrollBottom = node.scrollTop +\n    //         node.offsetHeight === node.scrollHeight;\n    // }\n\n    render() {\n        var msgelems = [];\n        for (var mi in this.state.messages) {\n            var m = this.state.messages[mi];\n            if (m.sender === this.userId) {\n                msgelems.push(<MsgSend key={mi} uid={\"msg\" + mi} msg={m} />);\n            } else {\n                msgelems.push(<MsgReceive key={mi} uid={\"msg\" + mi} msg={m} handleButtonClick={this.handleButtonClick.bind(this)} />);\n            }\n        }\n\n        var style = {};\n        if (this.props.hide) {\n            style.display = \"none\";\n        }\n\n        return (\n            <div className=\"chatti-container\" style={style}>\n                <Header size=\"medium\">Talk with bot</Header>\n                <ScrollToBottom className=\"chatti-content\">{msgelems}</ScrollToBottom>\n                <ChatInput handleEnterMessage={this.handleEnterMessage}></ChatInput>\n            </div>\n        );\n    }\n}\n\nexport { ChatWindow };\n\n","import * as _ from \"lodash\";\nimport { LinkModel, DiagramEngine, PortModel, DefaultLinkModel } from \"storm-react-diagrams\";\n\nexport class IntentPortModel extends PortModel {\n\tposition: string | \"in\" | \"out\";\n\n\tconstructor(pos: string = \"in\") {\n\t\tsuper(pos, \"intent\");\n\t\tthis.position = pos;\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tposition: this.position\n\t\t});\n\t}\n\n\tdeSerialize(data: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(data, engine);\n\t\tthis.position = data.position;\n\t}\n\n\tcreateLinkModel(): LinkModel {\n\t\tvar m = new DefaultLinkModel();\n\t\tm.setColor(\"green\");\n\t\t// m.addLabel(\"Testings\");\n\t\treturn m;\n\t}\n}\n","\n\nexport class RasaIntent {\n    type: string;\n    name: string;\n    text!: string;\n    texts: string[];\n    constructor(type: string, name: string) {\n        this.type = type;\n        this.name = name;\n        this.texts = [];\n    }\n}\n\nexport class RasaButton {\n    title: string\n    payload: string\n    constructor() {\n        this.title = \"\";\n        this.payload = \"\";\n    }\n}\n\nexport class RasaAction {\n    type: string;\n    name: string;\n    text!: string;\n    texts: string[];\n    buttons: RasaButton[];\n    constructor(type: string, name: string) {\n        this.type = type;\n        this.name = name;\n        this.text = \"\";\n        this.texts = [];\n        this.buttons = [];\n    }\n}","import * as _ from \"lodash\";\nimport { NodeModel, DiagramEngine } from \"storm-react-diagrams\";\nimport { IntentPortModel } from \"./IntentPortModel\";\nimport { RasaIntent, RasaAction } from \"../Rasa/Models\";\n\n// export interface DiamonNodeModelProps {\n// \ttitle: string;\n// \tinputsentences: string[];\n// \toutputsentence: string[];\n// }\n\nexport class IntentNodeModel extends NodeModel {\n\t// public static defaultProps: DiamonNodeModelProps = {\n\t// \ttitle: \"Add title\",\n\t// \tinputsentences: [],\n\t// \toutputsentence: [],\n\t// };\n\tname: string;\n\tintent: RasaIntent;\n\tactions: RasaAction[];\n\tactive: boolean;\n\n\tconstructor(name: string) {\n\t\tsuper(\"intent\");\n\t\tthis.name = name;\n\t\tthis.intent = new RasaIntent(\"text\", this.name);\n\t\tthis.actions = [];\n\t\tthis.active = false;\n\n\t\t// this.addPort(new IntentPortModel(\"top\"));\n\t\tthis.addPort(new IntentPortModel(\"in\"));\n\t\t// this.addPort(new IntentPortModel(\"bottom\"));\n\t\tthis.addPort(new IntentPortModel(\"out\"));\n\n\t\t// this.addPort(new DefaultPortModel(true, \"in\", \"In\"));\n\t\t// this.addPort(new DefaultPortModel(false, \"out\", \"Out\"));\n\t\t// this.addInPort(\"In\");\n\t\t// this.addOutPort(\"out\");\n\t}\n\n\tserialize() {\n\t\treturn _.merge(super.serialize(), {\n\t\t\tname: this.name,\n\t\t\tintent: this.intent,\n\t\t\tactions: this.actions,\n\t\t});\n\t}\n\n\tdeSerialize(data: any, engine: DiagramEngine) {\n\t\tsuper.deSerialize(data, engine);\n\t\tthis.name = data.name;\n\t\tthis.intent = data.intent;\n\t\tthis.actions = data.actions;\n\t}\n\n\tsetIntentTexts(texts: string[]) {\n\t\tthis.intent.texts = texts;\n\t}\n\n\tsetActionTexts(texts: string[]) {\n\t\tvar arr = [];\n\t\tvar i = new RasaAction(\"utter\", this.name);\n\t\ti.texts = texts;\n\t\tarr.push(i);\n\t\tthis.actions = arr;\n\t}\n\n\taddAction(a: RasaAction) {\n\t\tthis.actions.push(a);\n\t}\n\n}\n\nexport class IntentFallbackNodeModel extends IntentNodeModel {\n\tconstructor() {\n\t\tsuper(\"fallback\");\n\t\tthis.intent.type = \"fallback\";\n\t\tvar a = new RasaAction(\"action_default_fallback\", \"action_default_fallback\");\n\t\ta.text = \"Fallback\";\n\t\tthis.addAction(a)\n\t}\n}\n","import * as React from \"react\";\nimport { IntentNodeModel } from \"./IntentNodeModel\";\nimport { PortWidget } from \"storm-react-diagrams\";\nimport './Intent.css';\nimport { Header, Segment, List } from 'semantic-ui-react'\n// import { notDeepEqual } from \"assert\";\n\n// let idcounter = 1;\n\nexport interface IntentNodeWidgetProps {\n\tnode: IntentNodeModel;\n\tsize: number;\n\twidth: number;\n\theight: number;\n}\n\nexport interface IntentNodeWidgetState {\n\tid: string,\n\t// title: string,\n\t// inputsentences: string[],\n\t// outputsentences: string[],\n}\n\n/**\n * @author Dylan Vorster\n */\nexport class IntentNodeWidget extends React.Component<IntentNodeWidgetProps, IntentNodeWidgetState> {\n\tpublic static defaultProps: IntentNodeWidgetProps = {\n\t\tsize: 150,\n\t\tnode: new IntentNodeModel(\"UniqueName\"),\n\t\twidth: 300,\n\t\theight: 170,\n\t};\n\n\tconstructor(props: IntentNodeWidgetProps) {\n\t\tsuper(props);\n\t\tvar node = this.props.node;\n\t\tthis.state = {\n\t\t\tid: \"nodew\" + node.id,\n\t\t\t// title: node.title,\n\t\t\t// inputsentences: node.inputsentences || [],\n\t\t\t// outputsentences: node.outputsentences || [],\n\t\t};\n\t\t// this.props.size = 150;\n\t}\n\n\trender() {\n\t\t// console.log(\"rendering node\", this.props.node);\n\t\tconst { node } = this.props\n\t\tvar activeClass = node.active ? \" active\" : \"\";\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName={\"intent-node\" + activeClass}\n\t\t\t\tstyle={{\n\t\t\t\t\tposition: \"relative\",\n\t\t\t\t\twidth: this.props.width,\n\t\t\t\t\theight: this.props.height\n\t\t\t\t}}\n\t\t\t>\n\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tzIndex: 10,\n\t\t\t\t\t\ttop: 0 - 17,\n\t\t\t\t\t\tleft: this.props.width / 2 - 8,\n\t\t\t\t\t\tbackground: \"silver\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<PortWidget name=\"in\" node={this.props.node} />\n\t\t\t\t</div>\n\n\t\t\t\t<div\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: \"absolute\",\n\t\t\t\t\t\tzIndex: 10,\n\t\t\t\t\t\ttop: this.props.height - 2,\n\t\t\t\t\t\tleft: this.props.width / 2 - 8,\n\t\t\t\t\t\tbackground: \"silver\",\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t<PortWidget name=\"out\" node={this.props.node} />\n\t\t\t\t</div>\n\n\t\t\t\t<div className='intent-grid'>\n\t\t\t\t\t<Segment vertical textAlign='center' className='intent-header'><Header size='tiny'>{node.name}</Header></Segment>\n\t\t\t\t\t<Segment vertical textAlign='left'>\n\t\t\t\t\t\t<div className='intent-label'>Intents:</div>\n\t\t\t\t\t\t<List className='intent-list'>\n\t\t\t\t\t\t\t{node.intent.texts.map((text, index) => {\n\t\t\t\t\t\t\t\tif (index > 2) return;\n\t\t\t\t\t\t\t\treturn <List.Item key={\"insen\" + node.id + index}>{text}</List.Item>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</Segment>\n\t\t\t\t\t<Segment vertical textAlign='left'>\n\t\t\t\t\t\t<div className='intent-label'>Actions:</div>\n\t\t\t\t\t\t<List className='intent-list'>\n\t\t\t\t\t\t\t{node.actions.map((action, ni) => {\n\t\t\t\t\t\t\t\tif (ni > 1) return;\n\t\t\t\t\t\t\t\tif (action.type === \"utter\") {\n\t\t\t\t\t\t\t\t\treturn action.texts.map((text, index) => {\n\t\t\t\t\t\t\t\t\t\tif (index > 1) return;\n\t\t\t\t\t\t\t\t\t\treturn <List.Item key={\"outsen\" + node.id + ni + \"\" + index}>{text}</List.Item>\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t} else if (action.text !== \"\") {\n\t\t\t\t\t\t\t\t\treturn <List.Item key={\"outsen\" + node.id + ni + \"\"}>- {action.text}</List.Item>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</List>\n\t\t\t\t\t</Segment>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import * as SRD from \"storm-react-diagrams\";\nimport { IntentNodeWidget } from \"./IntentNodeWidget\";\nimport { IntentNodeModel } from \"./IntentNodeModel\";\nimport * as React from \"react\";\n\nexport class IntentNodeFactory extends SRD.AbstractNodeFactory {\n\tconstructor() {\n\t\tsuper(\"intent\");\n\t}\n\n\tgenerateReactWidget(diagramEngine: SRD.DiagramEngine, node: IntentNodeModel): JSX.Element {\n\t\treturn <IntentNodeWidget key={\"widget\" + node.id} node={node} />;\n\t}\n\n\tgetNewInstance() {\n\t\treturn new IntentNodeModel(\"UniqueName\");\n\t}\n}\n","import { PortModel, AbstractPortFactory } from \"storm-react-diagrams\";\n\nexport class SimplePortFactory extends AbstractPortFactory {\n\tcb: (initialConfig?: any) => PortModel;\n\n\tconstructor(type: string, cb: (initialConfig?: any) => PortModel) {\n\t\tsuper(type);\n\t\tthis.cb = cb;\n\t}\n\n\tgetNewInstance(initialConfig?: any): PortModel {\n\t\treturn this.cb(initialConfig);\n\t}\n}\n","import React from 'react';\nimport { Button, Dropdown, Form, Header, Input, Message, TextArea } from 'semantic-ui-react';\nimport { arrayToObject, loopObject, UID, isAlphanumeric } from '../Helpers/Helpers';\nimport { RasaAction, RasaButton } from \"../Rasa/Models\";\nimport './Designer.css';\n// import _ from 'loadash'\n\n\nexport class WidgetsEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        const { node } = props;\n        this.state = {\n            name: node.name,\n            intent: node.intent,\n            actions: arrayToObject(node.actions, \"name\"),\n        }\n\n        this.state.intent.text = this.state.intent.texts.join(\"\\n\");\n        for (var x in this.state.actions) {\n            var action = this.state.actions[x];\n            if (action.type === \"utter\") {\n                this.state.actions[x].text = action.texts.join(\"\\n\")\n            }\n        }\n\n        console.log(this.state.actions);\n\n        this.submitHandler = this.submitHandler.bind(this);\n    }\n\n    setAction(action) {\n        this.setState((state) => {\n            state.actions[action.name] = action;\n            return state;\n        });\n    }\n\n    findAction(name) {\n        return this.state.actions[name];\n    }\n\n    deleteAction(name) {\n        this.setState((state) => {\n\n            delete state.actions[name];\n            console.log(\"deleting action\", name, state.actions);\n            // for (var x in state.actions) {\n            //     if (state.actions[x].name === name) {\n            //         state.actions.splice(x, 1);\n            //     }\n            // }\n            return state;\n        });\n    }\n\n    handleIntentInputChange = (event) => {\n        const value = event.target.value;\n        if (!isAlphanumeric(value)) {\n            return;\n        }\n        this.setState((state) => {\n            state.intent.name = value;\n            return state;\n        });\n    }\n\n    handleIntentTextChange = (event) => {\n        const value = event.target.value;\n        this.setState((state) => {\n            state.intent.text = value;\n            state.intent.texts = value.split(\"\\n\");\n            return state;\n        });\n    }\n\n    handleAddAction = (e, { value }) => {\n        e.persist();\n        if (value === \"\") {\n            return;\n        }\n\n        var a = new RasaAction(value, UID());\n        if (a.type !== \"utter\" && a.type !== \"utter_buttons\") {\n            a.text = e.target.textContent;\n        }\n        this.setAction(a);\n    }\n\n    handleActionUtterInputChange = (event, { iaction }) => {\n        // console.log(e, value);\n        const value = event.target.value;\n        iaction.text = value;\n        iaction.texts = value.split(\"\\n\");\n        this.setAction(iaction);\n    }\n\n    handleActionDismiss = (e, { action_name }) => {\n        this.deleteAction(action_name);\n    }\n\n    handleActionTextChange = (e, { value }) => {\n        console.log(value);\n    }\n\n    handleActionAddButton = (e, { iaction }) => {\n        // var action = this.findAction(action_name);\n        var btn = new RasaButton();\n        iaction.buttons.push(btn);\n        this.setAction(iaction);\n    }\n\n    handleActionButtonInputChange = (e, { iaction, btn, index }) => {\n        var value = e.target.value;\n        iaction.buttons[index][btn] = value;\n        this.setAction(iaction);\n    }\n\n    handleActionButtonUtterInputChange = (event, { iaction }) => {\n        const value = event.target.value;\n        iaction.text = value;\n        this.setAction(iaction);\n    }\n\n    submitHandler() {\n        console.log(\"SUBMIT\");\n        var res = { ...this.state };\n        res.actions = Object.values(res.actions);\n        this.props.onSubmit(res);\n    }\n\n    render() {\n        const { node } = this.props;\n\n        const actionsList = [\n            { key: 'utter', value: 'utter', text: 'Response' },\n            { key: 'utter_buttons', value: 'utter_buttons', text: 'Response & Buttons' },\n            { key: 'action_listen', value: 'action_listen', text: 'Listen' },\n            { key: 'action_restart', value: 'action_restart', text: 'Restart' },\n            { key: 'action_default_fallback', value: 'action_default_fallback', text: 'Fallback' },\n            // { key: 'action_deactivate_form', value: 'action_deactivate_form', text: 'Deactivate Form' },\n            // { key: 'action_default_ask_affirmation', value: 'action_default_ask_affirmation', text: 'Ask Affirmation' },\n            // { key: 'action_revert_fallback_events', value: 'action_revert_fallback_events', text: 'Revert Fallback Events' },\n            // { key: 'action_default_ask_rephrase', value: 'action_default_ask_rephrase', text: 'Ask to Rephrase Intent' },\n            // { key: 'action_back', value: 'action_back', text: 'Undo Last User Intent' },\n            // { key: 'action_agent_handoff', value: 'action_agent_handoff', text: 'Agent Handoff' },\n        ]\n\n        // const { engine } = this.props;\n        // console.log(\"rendering widget editor\");\n        return (\n            <div className=\"widget-editor-container\" >\n                <Form onSubmit={this.submitHandler}>\n                    <Form.Field>\n                        <label>Name</label>\n                        <Input key=\"wname\" disabled={node.name === 'default'} placeholder='Allowed chars [0-9a-zA-Z_.-]' value={this.state.intent.name} onChange={this.handleIntentInputChange} />\n                    </Form.Field>\n                    <Header size=\"small\">Intents</Header>\n                    <Form.Field>\n                        <Message>\n                            <Message.Header className=\"we-msg-header\">Intents</Message.Header>\n                            <Message.Content>\n                                <TextArea key=\"winputsentences\"\n                                    className=\"we-textarea\"\n                                    // name={this.state.intent.name}\n                                    placeholder='Press Enter to add more'\n                                    value={this.state.intent.text}\n                                    onChange={this.handleIntentTextChange}>\n                                </TextArea>\n                            </Message.Content>\n                        </Message>\n                    </Form.Field>\n                    <Header size=\"small\">Actions</Header>\n                    {loopObject(this.state.actions, (action, index) => {\n                        if (action.type === \"utter\") {\n                            return (\n                                <Form.Field key={\"we-field\" + action.name + index}>\n                                    <Message\n                                        onDismiss={this.handleActionDismiss}\n                                        action_name={action.name}\n                                    >\n                                        <Message.Header className=\"we-msg-header\">Responses</Message.Header>\n                                        <Message.Content>\n                                            <TextArea\n                                                className=\"we-textarea\"\n                                                placeholder='Press Enter to add more'\n                                                value={action.text}\n                                                iaction={action}\n                                                onChange={this.handleActionUtterInputChange}>\n                                            </TextArea>\n                                        </Message.Content>\n                                    </Message>\n                                </Form.Field>\n                            )\n                        }\n\n                        if (action.type === \"utter_buttons\") {\n                            return (\n                                <Form.Field key={\"we-field\" + action.name + index}>\n                                    <Message key={\"we-field-message\" + action.name + index}\n                                        onDismiss={this.handleActionDismiss}\n                                        action_name={action.name}\n                                    >\n                                        <Message.Header className=\"we-msg-header\">Buttons</Message.Header>\n                                        <Message.Content>\n                                            <Form.Field>\n                                                <Input placeholder='Ask' iaction={action} value={action.text} onChange={this.handleActionButtonUtterInputChange} ></Input>\n                                            </Form.Field>\n                                            {\n                                                action.buttons.map((b, index) => {\n                                                    return (\n                                                        <Form.Field key={\"we-field-btn\" + action.name + index}>\n                                                            <Input placeholder='Title' style={{ width: '50%' }} value={b.title} iaction={action} btn={'title'} index={index} onChange={this.handleActionButtonInputChange} />\n                                                            <Input placeholder='Use /intent to fire intent' style={{ width: '50%' }} value={b.payload} iaction={action} btn={'payload'} index={index} onChange={this.handleActionButtonInputChange} />\n                                                        </Form.Field>\n                                                    )\n                                                })\n                                            }\n                                            <Button type='button' circular icon='add' size='tiny' iaction={action} onClick={this.handleActionAddButton} />\n\n                                        </Message.Content>\n                                    </Message>\n                                </Form.Field>\n                            )\n                        }\n\n                        return (\n                            <Form.Field key={\"we-field\" + action.name + index}>\n                                <Message key={\"we-field-message\" + action.name + index}\n                                    onDismiss={this.handleActionDismiss}\n                                    // header='Welcome back!'\n                                    action_name={action.name}\n                                    content={action.text}\n                                />\n                            </Form.Field>\n                        )\n                    })}\n\n                    <Form.Field>\n                        <label>Add more actions</label>\n                        <Dropdown\n                            placeholder='Select Action'\n                            fluid\n                            search\n                            selection\n                            options={actionsList}\n                            onChange={this.handleAddAction}\n                            value={\"\"}\n                        // defaultValue={\"\"}\n                        />\n                    </Form.Field>\n\n                    <Button color='blue' type='submit'>Submit</Button>\n                </Form>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport { Button, Form, Header } from 'semantic-ui-react';\nimport {\n    // DiagramProps,\n    // DefaultNodeModel,\n    DefaultLinkModel,\n    DiagramEngine,\n    DiagramModel,\n    // LinkModel,\n    DiagramWidget\n} from \"storm-react-diagrams\";\nimport { ChatWindow } from '../ChatWindow/ChatWindow';\nimport { UID } from '../Helpers/Helpers';\nimport { IntentNodeFactory } from \"../IntentNode/IntentNodeFactory\";\nimport { IntentFallbackNodeModel, IntentNodeModel } from \"../IntentNode/IntentNodeModel\";\nimport { IntentPortModel } from \"../IntentNode/IntentPortModel\";\nimport { SimplePortFactory } from \"../IntentNode/SimplePortFactory\";\nimport { WidgetsEditor } from './WidgetsEditor';\nimport { Backend } from '../Backend';\nimport queryString from 'query-string';\nimport \"storm-react-diagrams/dist/style.min.css\";\nimport './Designer.css';\nimport { RasaAction } from '../Rasa/Models';\n\nfunction EditorHeader(props) {\n    return <Header size=\"large\" className=\"diagram-editor-header\" textAlign=\"center\">{props.children}</Header>\n}\n\nexport class Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n        const { engine, model } = this.props;\n\n        this.state = {\n            model: {\n                id: model.id,\n                name: \"\",\n                httpport: 0,\n                httpurl: \"\",\n            },\n            saving: false,\n            saved: false,\n            modelsaveinfo: \"\",\n            training: false,\n            selectednode: null,\n        }\n\n        this.backend = new Backend();\n\n        var self = this;\n\n        const parsed = queryString.parse(window.location.search);\n\n        this.setupModelListeners();\n\n        if (parsed.model) {\n            this.backend.http(\"/model/load\", { id: parsed.model }, \"POST\").then(\n                (result) => {\n                    if (!result.ok) {\n                        console.log(\"Loading model failed\");\n                        return;\n                    }\n\n                    result.json().then(res => {\n                        console.log(\"Loading model\", res);\n                        //First we want to update our diagram model\n                        model.deSerializeDiagram(res.diagram, engine);\n                        engine.repaintCanvas();\n\n                        //Then lets update our db model\n                        self.setState((state) => {\n                            for (var x in res.model) {\n                                state.model[x] = res.model[x];\n                            }\n                            state.saved = true;\n                            return state;\n                        });\n                    })\n                },\n\n            )\n        } else {\n            this.createDemoNodes();\n        }\n\n        engine.setDiagramModel(model);\n        this.addNewNode = this.addNewNode.bind(this);\n        this.saveModel = this.saveModel.bind(this);\n        this.trainModel = this.trainModel.bind(this);\n        this.runModel = this.runModel.bind(this);\n    }\n\n    setupModelListeners() {\n        var self = this;\n        const { model } = this.props;\n        model.addListener({\n            nodesUpdated: e => {\n                // console.log(\"nodesUpdated\", e.node)\n                e.node.addListener({\n                    selectionChanged: (e) => {\n                        // console.log(\"selectionChanged\", e);\n                        if (e.isSelected) {\n                            self.setState({ selectednode: e.entity });\n                            // e.firing = false;\n                        } else {\n                            self.setState({ selectednode: null });\n                        }\n\n                    }\n                });\n            },\n            // linksUpdated: e => console.log(\"linksUpdated\", e),\n\n            // these are never triggered\n            // zoomUpdated: e => console.log(\"zoomUpdated\", e),\n            // gridUpdated: e => console.log(\"gridUpdated\", e),\n            // offsetUpdated: e => console.log(\"offsetUpdated\", e),\n            // entityRemoved: e => console.log(\"entityRemoved\", e),\n            // selectionChanged: e => console.log(\"selectionChanged\", e)\n        });\n    }\n\n    createDemoNodes() {\n        const { model } = this.props;\n\n        var fallback = new IntentFallbackNodeModel();\n        fallback.setPosition(50, 50);\n\n        var mynode1 = new IntentNodeModel(\"Greetings\");\n        mynode1.setPosition(500, 50);\n        mynode1.setIntentTexts([\"Hello\", \"Hi\", \"What's up\"]);\n        mynode1.setActionTexts([\"Hi. How Can I help you\", \"Hello\"]);\n\n        var mynode2 = new IntentNodeModel(\"Introduce\");\n        mynode2.setPosition(500, 350);\n        mynode2.setIntentTexts([\"Who are you\", \"How this works\"]);\n        mynode2.setActionTexts([\"I am chatbot built on Rasa\", \"I am your assistant today\"]);\n\n        var link = new DefaultLinkModel();\n        link.setColor(\"green\");\n        link.setSourcePort(mynode1.getPort(\"out\"));\n        link.setTargetPort(mynode2.getPort(\"in\"));\n\n        model.addAll(fallback, mynode1, mynode2, link);\n        model.name = \"Test Model\";\n    }\n\n    saveModel() {\n        const { model } = this.props;\n        var savemodel = {\n            model: this.state.model,\n            diagram: model.serializeDiagram(),\n        }\n\n        console.log(\"Save model\", savemodel);\n\n        this.setState({\n            saving: true,\n            saveinfo: \"Parsing Diagram ...\",\n        });\n\n        this.backend.post(\"/model/save\", savemodel).then(\n            (result) => {\n                console.log(\"Saving modell success\", result);\n                this.setState({\n                    saving: false,\n                    saved: true,\n                    saveinfo: \"Parsing Diagram ...\",\n                });\n\n                const parsed = queryString.parse(window.location.search);\n                if (!parsed.model || parsed.model !== model.id) {\n                    parsed.model = model.id;\n                    window.location = window.location.pathname + \"?\" + queryString.stringify(parsed)\n                }\n            },\n            (error) => {\n                console.log(\"Failed to post hi message\", error);\n                this.setState({\n                    saving: false,\n                    saveinfo: error,\n                });\n            }\n        )\n    }\n\n    trainModel() {\n        const { model } = this.props;\n        var jsm = { id: model.id };\n        this.setState({\n            training: true,\n            saveinfo: \"Training model ...\",\n        });\n        this.backend.post(\"/model/train\", jsm).then(\n            (result) => {\n                console.log(\"Training modell success\", result);\n                // this.setState({\n                //     training: false,\n                //     saveinfo: \"Model trained\",\n                // });\n                this.runModel()\n\n            },\n            (error) => {\n                console.log(\"Failed to post hi message\", error);\n                this.setState({\n                    training: false,\n                    saveinfo: error,\n                });\n            }\n        )\n    }\n\n    runModel() {\n        const { model } = this.props;\n        var jsm = { id: model.id };\n        console.log(\"Setting state\")\n        this.setState({\n            training: true,\n            saveinfo: \"Running model ...\",\n        });\n\n        this.setIntentNodeActive(\"\");\n        this.backend.post(\"/model/run\", jsm).then(\n            (result) => {\n                console.log(\"Training modell success\", result);\n                this.setState((state) => {\n                    state.training = false;\n                    state.saveinfo = \"Model up and running\";\n                    state.model.httpport = result.httpport;\n                    state.model.httpurl = result.httpurl;\n                    return state;\n                });\n            },\n            (error) => {\n                console.log(\"Failed to post hi message\", error);\n                this.setState({\n                    training: false,\n                    saveinfo: error,\n                });\n            }\n        )\n    }\n\n    addNewNode() {\n        const { model } = this.props;\n        var node = new IntentNodeModel(\"intent\" + UID());\n        console.log(model, model.offsetX, model.offsetY);\n        var x = model.offsetX * (-1) + 50;\n        var y = model.offsetY * (-1) + 50;\n\n        node.setPosition(x, y);\n        model.addAll(node);\n        node.setSelected(true);\n    }\n\n    widgetEditorSubmit(node, values) {\n        const { engine } = this.props;\n\n        console.log(values);\n        // console.log(\"widgetEditorSubmit\", node, values);\n        node.name = node.intent.name;\n        node.intent = values.intent;\n        node.actions = values.actions;\n\n        if (node.intent.type === \"text\") {\n            for (var x in node.actions) {\n                //Just prefix all actions with current intent name for easier debuging on rasa\n                node.actions[x].name = node.intent.name + UID();\n            }\n        }\n\n        this.setState({\n            saved: false,\n        })\n        engine.repaintCanvas();\n    }\n\n    widgetEditorKeypress(event) { //Had to stop stupid keypropagation\n        event.stopPropagation();\n    }\n\n    handleModelNameChange = (event) => {\n        const val = event.target.value;\n        this.setState((state) => {\n            state.model.name = val;\n            return state;\n        });\n    }\n\n    handleChatIntentChange = (tracker) => {\n        var intent = tracker.latest_message.intent;\n        this.setIntentNodeActive(intent.name);\n    }\n\n    setIntentNodeActive = (name) => {\n        const { engine, model } = this.props;\n        for (var id in model.nodes) {\n            model.nodes[id].active = (model.nodes[id].intent.name === name);\n        }\n\n        engine.repaintCanvas();\n    }\n\n    render() {\n        const { engine } = this.props;\n\n        var weditor;\n        var selnode = this.state.selectednode;\n        var controlcontent;\n        var editorheader;\n\n        if (selnode) {\n            editorheader = \"Widget Editor\";\n\n            weditor = (\n                <WidgetsEditor\n                    key={\"wedit\" + selnode.id}\n                    node={selnode}\n                    onSubmit={this.widgetEditorSubmit.bind(this, selnode)}\n                />\n            );\n        } else {\n            editorheader = \"Designer\";\n\n            controlcontent = (\n                <Form>\n                    <Form.Group widths='equal'>\n                        <Form.Input width={10} type=\"text\" value={this.state.model.name} onChange={this.handleModelNameChange} />\n                        <Form.Button fluid width={6} color='blue' loading={this.state.saving} onClick={this.saveModel}>Save Model</Form.Button>\n                    </Form.Group>\n                    <Form.Group widths='equal'>\n                        <Form.Button fluid width={6} color='teal' disabled={this.state.training || !this.state.saved} loading={this.state.training} onClick={this.trainModel}>Train Model</Form.Button>\n                    </Form.Group>\n                    <Form.Field>\n                        <label>BOT URL: {this.state.model.httpurl}</label>\n                    </Form.Field>\n                </Form>\n            )\n\n            weditor = (\n                <div>\n                    <Header size=\"medium\">Nodes</Header>\n                    <Button color='teal' onClick={this.addNewNode}>Add New Node</Button>\n                </div>\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <DiagramWidget className=\"diagram-canvas\" diagramEngine={engine} />\n                <div className=\"diagram-editor\" onKeyDown={this.widgetEditorKeypress} onKeyPress={this.widgetEditorKeypress} onKeyUp={this.widgetEditorKeypress}>\n                    <EditorHeader>{editorheader}</EditorHeader>\n                    {controlcontent}\n                    <ChatWindow\n                        hide={selnode != null}\n                        key={\"chatbot\" + this.state.model.httpport}\n                        httpurl={this.state.model.httpurl}\n                        onIntentChange={this.handleChatIntentChange}\n                    />\n                    {weditor}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default (props) => {\n    console.log(\"Drawing canvas\");\n    const engine = new DiagramEngine();\n    engine.installDefaultFactories();\n\n    // register some other factories as well\n    engine.registerPortFactory(new SimplePortFactory(\"intent\", function () { return new IntentPortModel() }));\n    engine.registerNodeFactory(new IntentNodeFactory());\n\n    const model = new DiagramModel();\n\n    return <Dashboard className=\"srd-demo-canvas\" engine={engine} model={model} />;\n};","import React from 'react';\nimport { Backend } from '../Backend';\nimport queryString from 'query-string';\nimport {\n    Grid,\n    Form,\n    TextArea,\n\n} from 'semantic-ui-react';\nimport { RasaAction } from '../Rasa/Models';\n\n\nclass Actions extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            actions: {\n                action_default_fallback: new RasaAction(\"action_default_fallback\", \"action_default_fallback\"),\n            },\n        }\n\n        this.backend = new Backend();\n        const parsed = queryString.parse(window.location.search);\n        var self = this;\n\n        if (parsed.model) {\n            this.backend.http(\"/model/data/load\", { id: parsed.model }, \"POST\").then(\n                (result) => {\n                    if (!result.ok) {\n                        console.log(\"Loading model actions failed\");\n                        return;\n                    }\n\n                    result.json().then(res => {\n                        console.log(\"Loading model actions\", res);\n                        //Then lets update our db model\n                        self.setState((state) => {\n                            for (var x in res) {\n                                state[x] = res[x];\n                            }\n                            return state;\n                        });\n                    })\n                },\n\n            )\n        } else {\n        }\n    }\n\n    handleFallbackActionTextChange = (event) => {\n        const value = event.target.value;\n        this.setState((state) => {\n            state.actions.action_default_fallback.text = value;\n            state.actions.action_default_fallback.texts = value.split(\"\\n\");\n            return state;\n        });\n    }\n\n    submitHandler = (event) => {\n        var res = this.state;\n        console.log(\"SUBMIT\");\n        this.backend.http(\"/model/data/save\", res, \"POST\").then(\n            (result) => {\n                if (!result.ok) {\n                    console.log(\"Saving model actions failed\");\n                    return;\n                }\n\n                result.json().then(res => {\n                    console.log(\"Saveing model actions\", res);\n                })\n            },\n\n        )\n    }\n\n    render() {\n        return (\n            <Form style={{ padding: \"20px\" }} onSubmit={this.submitHandler}>\n                <Form.Group unstackable widths={3}>\n                    <Form.Field>\n                        <label>Fallback Action</label>\n                        <Form.TextArea style={{ minHeight: \"120px\" }}\n                            placeholder='Press Enter to add more'\n                            value={this.state.actions.action_default_fallback.text}\n                            onChange={this.handleFallbackActionTextChange}>\n                            ></Form.TextArea>\n                    </Form.Field>\n                </Form.Group>\n                <Form.Button type='submit'>Submit</Form.Button>\n            </Form >\n        );\n    }\n}\n\nexport {\n    Actions\n}","import React from \"react\";\nimport { BrowserRouter as Router, Link, NavLink, Route } from \"react-router-dom\";\nimport { Menu } from 'semantic-ui-react';\nimport Diagram from './Diagram'\nimport { Actions } from \"./Actions\";\n\nfunction Designer({ match, location }) {\n    const Nav = (props) => {\n        const isActive = (match, location) => {\n            return location.pathname + location.search === props.to;\n        }\n\n        return <NavLink\n            // exact\n            {...props}\n            isActive={isActive}\n            activeClassName=\"active\"\n        />\n    };\n\n    return (\n        <Router>\n            <Menu className=\"nav-menu\" size=\"large\" >\n                <Menu.Item\n                    as={Nav}\n                    to={`/designer/editor${location.search}`}\n                    content=\"Designer\" />\n                <Menu.Item\n                    as={Nav}\n                    to={`/designer/actions${location.search}`}\n                    content=\"Actions\"\n                />\n            </Menu>\n            {/* <Route exact path=\"/designer\" component={DiagramDesigner} /> */}\n            <Route path=\"/designer/editor\" component={DesignerEditor} />\n            <Route path=\"/designer/actions\" component={DesignerActions} />\n        </Router>\n    );\n}\n\nfunction DesignerEditor({ match }) {\n    return (\n        <div id=\"diagram-container\">\n            <Diagram />\n        </div>\n    );\n}\n\nfunction DesignerActions({ match }) {\n    return (\n        <div id=\"actions-container\">\n\n            <Actions />\n        </div>\n    );\n}\n\nexport {\n    Designer,\n}","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport { HomePage } from \"./HomePage/HomePage\";\nimport { Designer } from \"./Designer/Designer\";\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<Route exact path=\"/\" component={HomePage} />\n\t\t\t<Route path=\"/home\" component={HomePage} />\n\t\t\t<Route path=\"/designer/editor\" component={Designer} />\n\t\t\t<Route path=\"/designer/actions\" component={Designer} />\n\t\t</Router>\n\t);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<SimpleDiagramWidget />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}